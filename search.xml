<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CHD</title>
      <link href="/2023/07/19/chd/"/>
      <url>/2023/07/19/chd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文记录先心病实验的相关设置与数据整理</p></blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>先天性心脏病（Congenital Heart Disease，CHD，简称先心病）是最常见的先天性畸形，可危及患儿的健康和生命，而影像学检查是诊断先心病的重要手段。近年来，使用深度学习的方法辅助放射科医生来诊断先心病的研究越发广泛。有些工作使用CNN和U-net对未出生患儿超声图像的病灶区域进行分类与分割。还有些工作使用Seg-CNN对先心病患者的3D CT图像进行分类与分割。这些方法聚焦于对先心病病理的分析与研究。值得注意的是，在先心病早期的筛查与诊断过程中，胸片检查也同样占据重要地位，尤其是在资源匮乏地区。然而，先心病患者的胸片可能存在细微的改变，这可能会导致放射科医生的漏诊。所以，将深度学习的方法与胸片结合，辅助放射科医生早期快速高效的诊断先心病是一个很有前景的方向。</p><p>结合华西数据中心，我们收集了一个先心病二分类的 chest X-ray 数据集。</p><p>数据集目录如下：</p><pre><code>$ tree -C --filelimit=10./CHD|-- normal_png_20220812 [403 entries exceeds filelimit, not opening dir]|-- normal_png_20221008 [520 entries exceeds filelimit, not opening dir]|-- normal_png_20221030 [1020 entries exceeds filelimit, not opening dir]|-- normal_png_20221225 [165 entries exceeds filelimit, not opening dir]|-- patient_png_20220812 [14 entries exceeds filelimit, not opening dir]|-- patient_png_20221008 [374 entries exceeds filelimit, not opening dir]|-- patient_png_20221030 [805 entries exceeds filelimit, not opening dir]|-- patient_png_20221225 [165 entries exceeds filelimit, not opening dir]normal-2108  patient-1358</code></pre><h2 id="2-任务描述"><a href="#2-任务描述" class="headerlink" title="2. 任务描述"></a>2. 任务描述</h2><h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h3><blockquote><p>训练正常人与先心病患者的二分类任务</p></blockquote><h4 id="数据集划分"><a href="#数据集划分" class="headerlink" title="数据集划分"></a>数据集划分</h4><table>      <tr><th>train set</th><th>valid set</th><th>test set</th></tr>  <tr>  <td>normal_png_20220812<br>normal_png_20221008<br>normal_png_20221030<br>patient_png_20221008<br>patient_png_20221030</td>  <td>normal_png_20220812<br>normal_png_20221008<br>normal_png_20221030<br>patient_png_20221008<br>patient_png_20221030</td>  <td>normal_png_20221225<br>patient_png_20221225</td>  </tr>  <tr>  <td>2810</td><td>312</td><td>330</td>  </tr></table>   <h4 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h4><p>基于timm库（0.6.11）选择轻量级模型-resnet18, densenet121, mobilenetv2_120d, mobilevit_s</p><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><table>      <tr>  <th>pretrained</th>  <th>model</th>  <th>accuracy</th>  <th>precision</th>  <th>recall</th>  <th>specificity</th>  <th>F1_score</th>  </tr>  <tr>    <td>True</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr></table>   <p>pretrained: True<br>checkpoint: best<br>model: resnet18 [accuracy]:0.9848 [precision]:0.9878 [recall]:0.9818 [specificity]:0.9879 [F1_score]:0.9848<br>model: densenet121 [accuracy]:0.9939 [precision]:1.0000 [recall]:0.9879 [specificity]:1.0000 [F1_score]:0.9939<br>model: mobilenetv2_120d [accuracy]:0.9788 [precision]:0.9817 [recall]:0.9758 [specificity]:0.9818 [F1_score]:0.9787<br>model: mobilevit_s [accuracy]:0.9788 [precision]:0.9759 [recall]:0.9818 [specificity]:0.9758 [F1_score]:0.9789</p><p>pretrained: False<br>checkpoint: best<br>model: resnet18 [accuracy]:0.9515 [precision]:0.9461 [recall]:0.9576 [specificity]:0.9455 [F1_score]:0.9518<br>model: densenet121 [accuracy]:0.9818 [precision]:0.9938 [recall]:0.9697 [specificity]:0.9939 [F1_score]:0.9816<br>model: mobilenetv2_120d [accuracy]:0.9212 [precision]:0.9064 [recall]:0.9394 [specificity]:0.9030 [F1_score]:0.9226<br>model: mobilevit_s [accuracy]:0.9515 [precision]:0.9461 [recall]:0.9576 [specificity]:0.9455 [F1_score]:0.9518</p><h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><p><img src="https://cdn.jsdelivr.net/gh/Jonydom/myPic/img/20230720144304.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/Jonydom/myPic/img/20230720150057.png" alt></p><h2 id="3-训练代码"><a href="#3-训练代码" class="headerlink" title="3. 训练代码"></a>3. 训练代码</h2>]]></content>
      
      
      <categories>
          
          <category> coding note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mynote</title>
      <link href="/2023/07/18/mynote/"/>
      <url>/2023/07/18/mynote/</url>
      
        <content type="html"><![CDATA[<h3 id="git-bash-安装-tree-exe"><a href="#git-bash-安装-tree-exe" class="headerlink" title="git bash 安装 tree.exe"></a>git bash 安装 tree.exe</h3><p>从 <a href="https://gnuwin32.sourceforge.net/packages/tree.htm" target="_blank" rel="noopener">Tree for Windows</a> 网站下载 Binaries zip 包，解压后将 <code>bin</code> 目录下的 <code>tree.exe</code> 放在 <code>D:\Git\mingw64\bin</code> 目录下。</p><img src="/2023/07/18/mynote/20230718132456.png" width="20230718132456"><blockquote><p>tree 命令</p><p>tree -C # 打印目录有颜色</p><p>tree -h # 打印文件的大小（有单位）</p><p>tree -s # 打印文件的大小（无单位）</p><p>tree ./ –filelimit=10 # 只展示文件数小于10的目录</p></blockquote><img src="/2023/07/18/mynote/20230718134442.png" width="20230718134442"><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><blockquote><p>创建多级目录</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p ./example/{exp1,exp2}/exp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> coding note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog_develop</title>
      <link href="/2023/07/17/blog-develop/"/>
      <url>/2023/07/17/blog-develop/</url>
      
        <content type="html"><![CDATA[<h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><h3 id="个人博客（Hexo-VScode-Paste-Image-PicGo）"><a href="#个人博客（Hexo-VScode-Paste-Image-PicGo）" class="headerlink" title="个人博客（Hexo + VScode + Paste Image + PicGo）"></a>个人博客（Hexo + VScode + Paste Image + PicGo）</h3><h4 id="1-图片路径问题：本地与线上部署不一致"><a href="#1-图片路径问题：本地与线上部署不一致" class="headerlink" title="1. 图片路径问题：本地与线上部署不一致"></a>1. 图片路径问题：本地与线上部署不一致</h4><p><strong>原因：</strong></p><p>markdown文档中的图片路径格式一定要是 <code>![example](path/example.jpg)</code> ！！！这样 <code>hexo-assert-image</code> 中的 <code>index.js</code> 才会将图片路径正确解析到 <code>index.html</code> 中。</p><p>比如：</p><pre class="line-numbers language-html"><code class="language-html">![20230717211250](mmpretrain-learning/20230717211250.png)正确转换为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/2023/07/17/mmpretrain-learning/20230717211250.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20230717211250<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-shadow img-margin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>解决方案：</strong></p><p>修改 Paste Image 的配置文件：settings.json</p><pre><code>{    &quot;pasteImage.path&quot;: &quot;${projectRoot}/source/_posts/${currentFileNameWithoutExt}&quot;,    &quot;pasteImage.prefix&quot;: &quot;&quot;,    &quot;pasteImage.basePath&quot;: &quot;${projectRoot}/source/_posts&quot;,    &quot;pasteImage.defaultName&quot;: &quot;YMMDDHHmmss&quot;}</code></pre><p>设置 Paste Image: Insert Pattern 为 <code>![${imageFileNameWithoutExt}](${imageFilePath}${imageSyntaxSuffix}</code></p><img src="/2023/07/17/blog-develop/20230717213736.png" width="20230717213736"><p><strong>步骤：</strong></p><ul><li>截图软件进行截图，图片无需放置本地，在剪切板中即可；</li><li>本地粘贴：使用 Paste Image 的 <code>ctrl + alt + v</code> 功能，将 <code>![example](path/example.jpg)</code> 图片路径粘贴到博客 md 文件中；</li><li>图床部署：使用 PicGo 上传图片快捷键 <code>ctrl + shift + p</code> 将图片上传到云端 GitHub 仓库中，并将 <code>![example](path/example.jpg)</code> 图片路径粘贴到博客 md 文件中。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Imagenet1k_learning</title>
      <link href="/2023/07/17/imagenet1k-learning/"/>
      <url>/2023/07/17/imagenet1k-learning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍ImageNet数据集与预处理详细步骤</p></blockquote><h2 id="1-ImageNet数据集介绍"><a href="#1-ImageNet数据集介绍" class="headerlink" title="1. ImageNet数据集介绍"></a>1. ImageNet数据集介绍</h2><p><a href="https://blog.csdn.net/qq_36665989/article/details/119947229" target="_blank" rel="noopener">参考链接</a></p><p>ImageNet是一种数据集，而不是神经网络模型。斯坦福大学教授李飞飞为了解决机器学习中过拟合和泛化的问题而牵头构建的数据集。该数据集从2007年开始手机建立，直到2009年作为论文的形式在CVPR 2009上面发布。直到目前，该数据集仍然是深度学习领域中图像分类、检测、定位的最常用数据集之一。</p><p>基于ImageNet有一个比赛，从2010年开始举行，到2017年最后一届结束。该比赛称为ILSVRC，全称是ImageNet Large-Scale Visual Recognition Challenge，每年举办一次，每次从ImageNet数据集中抽取部分样本作为比赛的数据集。ILSVRC比赛包括：图像分类、目标定位、目标检测、视频目标检测、场景分类。在该比赛的历年优胜者中，诞生了AlexNet（2012）、VGG（2014）、GoogLeNet（2014）、ResNet（2015）等耳熟能详的深度学习网络模型。“ILSVRC”一词有时候也用来特指该比赛使用的数据集，即ImageNet的一个子集，其中最常用的是2012年的数据集，记为ILSVRC2012。因此有时候提到ImageNet，很可能是指ImageNet中用于ILSVRC2012的这个子集。ILSVRC2012数据集拥有1000个分类（这意味着面向ImageNet图片识别的神经网络的输出是1000个），每个分类约有1000张图片。这些用于训练的图片总数约为120万张，此外还有一些图片作为验证集和测试集。ILSVRC2012含有5万张图片作为验证集，10万张图片作为测试集（测试集没有标签，验证集的标签在另外的文档给出）。</p><table><thead><tr><th align="center">ILSVRC2012训练集</th><th align="center">1000个分类</th><th align="center">约120万张图片</th></tr></thead><tbody><tr><td align="center">ILSVRC2012验证集</td><td align="center">1000个分类</td><td align="center">5万张图片</td></tr><tr><td align="center">ILSVRC2012测试集</td><td align="center">1000个分类</td><td align="center">10万张图片</td></tr></tbody></table><p>下载方式：</p><ol><li><a href="https://image-net.org/" target="_blank" rel="noopener">官网</a> 下载 - 网速慢、总是断网</li><li><a href="https://pan.baidu.com/s/1WNPo2iXrDOaa_uP_Opx_qA?pwd=pqxi" target="_blank" rel="noopener">网盘</a> 下载 - 速度快、下载一天就下载好了（提取码：pqxi）</li></ol><h2 id="2-ImageNet数据集预处理"><a href="#2-ImageNet数据集预处理" class="headerlink" title="2. ImageNet数据集预处理"></a>2. ImageNet数据集预处理</h2><p><a href="https://blog.csdn.net/qq_45588019/article/details/125642466" target="_blank" rel="noopener">参考链接</a></p><p>下载好的 ImageNet tar 包目录结构如下：</p><img src="/2023/07/17/imagenet1k-learning/20230718134749.png" width="20230718134749"><blockquote><p>检查数据集的md5哈希值，保证完整性</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">md5sum ILSVRC2012_img_train.tar# 1d675b47d978889d74fa0da5fadfb00emd5sum ILSVRC2012_img_val.tar# 29b22e2961454d5413ddabcf34fc5622<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/07/17/imagenet1k-learning/20230718162254.png" width="20230718162254"><img src="/2023/07/17/imagenet1k-learning/20230718162222.png" width="20230718162222"><h3 id="2-1-训练集处理"><a href="#2-1-训练集处理" class="headerlink" title="2.1 训练集处理"></a>2.1 训练集处理</h3><p>ILSVRC2012_img_train.tar 文件大小为138G，包含1000个类别的 tar 包，tar 包的名称就是其类别标签。</p><img src="/2023/07/17/imagenet1k-learning/20230718135144.png" width="20230718135144"><p><strong>a.</strong> 创建训练集和验证集目录</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p ./ImageNet1k/{train,val}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/imagenet1k-learning/20230718140122.png" width="20230718140122"><p><strong>b.</strong> 解压 ILSVRC2012_img_train.tar 到 ./ImageNet1k/train 目录下</p><pre class="line-numbers language-shell"><code class="language-shell">tar -xvf ILSVRC2012_img_train.tar -C ./ImageNet1k/train<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/07/17/imagenet1k-learning/20230718140954.png" width="20230718140954"><pre><code>for x in `ls ./ImageNet1k/train/*tar`; do fn=./ImageNet1k/train/`basename $x .tar`; mkdir $fn; tar -xvf $x -C $fn; rm -f $fn.tar; done</code></pre><p><strong>c.</strong> 验证</p><p>执行命令，查看 ./ImageNet1k/train 目录下的文件夹数量，若解压成功，则返回1000：</p><pre><code>ls -lR ./ImageNet1k/train|grep &quot;^d&quot;|wc -l</code></pre><p>执行命令，查看 ./ImageNet1k/train 目录下所有文件（图片）的数量，若解压成功，则返回1281167：</p><pre><code>ls -lR ./ImageNet1k/train|grep &quot;^-&quot;|wc -l</code></pre><h3 id="2-2-验证集处理"><a href="#2-2-验证集处理" class="headerlink" title="2.2 验证集处理"></a>2.2 验证集处理</h3><p>ILSVRC2012_img_val.tar 文件大小为6.3G，与训练集不同的是，验证集图片没有按照类别进行分类存储，需要结合 ILSVRC2012_devkit_t12.tar.gz 文件进行文件名与类别标签的映射处理。</p><img src="/2023/07/17/imagenet1k-learning/20230718145433.png" width="20230718145433"><p><strong>a.</strong> 解压 ILSVRC2012_img_val.tar 到 ./ImageNet1k/val 目录下</p><pre><code>tar -xvf ILSVRC2012_img_val.tar -C ./ImageNet1k/val</code></pre><p>此时 val 目录下是50000张图像，并没有被分类到1000个文件夹下。因此需要将验证集中的图像进行分类存放。</p><p><strong>b.</strong> 解压 ILSVRC2012_devkit_t12.tar.gz 文件</p><pre><code>tar -xzf ILSVRC2012_devkit_t12.tar.gz</code></pre><p>该文件中记录着验证集中的图像名及其类别标签之间的映射关系。</p><p><strong>c.</strong> 在 ./ 目录下创建 Python 脚本，命名为“process_val.py”，其内容如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy <span class="token keyword">import</span> io<span class="token keyword">import</span> os<span class="token keyword">import</span> shutil<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">move_valimg</span><span class="token punctuation">(</span>val_dir<span class="token operator">=</span><span class="token string">'./val'</span><span class="token punctuation">,</span> devkit_dir<span class="token operator">=</span><span class="token string">'./ILSVRC2012_devkit_t12'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    move valimg to correspongding folders.    val_id(start from 1) -> ILSVRC_ID(start from 1) -> WIND    organize like:    /val       /n01440764           images       /n01443537           images        .....    """</span>    <span class="token comment" spellcheck="true"># load synset, val ground truth and val images list</span>    synset <span class="token operator">=</span> io<span class="token punctuation">.</span>loadmat<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>devkit_dir<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'meta.mat'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ground_truth <span class="token operator">=</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>devkit_dir<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'ILSVRC2012_validation_ground_truth.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> ground_truth<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    labels <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    root<span class="token punctuation">,</span> _<span class="token punctuation">,</span> filenames <span class="token operator">=</span> next<span class="token punctuation">(</span>os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>val_dir<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># val image name -> ILSVRC ID -> WIND</span>        val_id <span class="token operator">=</span> int<span class="token punctuation">(</span>filename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ILSVRC_ID <span class="token operator">=</span> labels<span class="token punctuation">[</span>val_id <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        WIND <span class="token operator">=</span> synset<span class="token punctuation">[</span><span class="token string">'synsets'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ILSVRC_ID <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"val_id:%d, ILSVRC_ID:%d, WIND:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>val_id<span class="token punctuation">,</span> ILSVRC_ID<span class="token punctuation">,</span> WIND<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># move val images</span>        output_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> WIND<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>output_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>output_dir<span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    val_dir <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    devkit_dir <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    move_valimg<span class="token punctuation">(</span>val_dir<span class="token punctuation">,</span> devkit_dir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行该脚本，进行验证集分类存放进1000个文件夹中：</p><p><code>python process_val.py ./ImageNet1k/val ./ILSVRC2012_devkit_t12</code></p><h2 id="3-大数据集分片与重组"><a href="#3-大数据集分片与重组" class="headerlink" title="3. 大数据集分片与重组"></a>3. 大数据集分片与重组</h2><p><a href="https://blog.csdn.net/xunan003/article/details/79068648" target="_blank" rel="noopener">参考链接</a></p><h3 id="3-1-tar-包分片"><a href="#3-1-tar-包分片" class="headerlink" title="3.1 tar 包分片"></a>3.1 tar 包分片</h3><p>将 ./ImageNet1k 打包为 ./ImageNet1k.tar.gz</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zcvf ./ImageNet1k.tar.gz ./ImageNet1k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算 ImageNet1k.tar.gz 的 md5 哈希值</p><pre class="line-numbers language-shell"><code class="language-shell">md5sum ImageNet1k.tar.gz# 45623606c5064890771d99824044b681 *ImageNet1k.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 ImageNet1k.tar.gz 按照 50G per file 进行文件切分</p><pre class="line-numbers language-shell"><code class="language-shell">tar -czf - ./ImageNet1k.tar.gz | split -b 20480m -d - ImageNet1k.tar.gz.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-tar-包重组"><a href="#3-2-tar-包重组" class="headerlink" title="3.2 tar 包重组"></a>3.2 tar 包重组</h3><pre class="line-numbers language-shell"><code class="language-shell">cat ImageNet1k.tar.gz.tar.gz* >> ImageNet1k.tar.gz.tar.gztar -zxvf ImageNet1k.tar.gz.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次计算重组后的 ImageNet1k.tar.gz的 md5 哈希值</p><pre class="line-numbers language-shell"><code class="language-shell">md5sum ImageNet1k.tar.gz# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> coding note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D | 学习mmpretrain框架</title>
      <link href="/2023/07/17/mmpretrain-learning/"/>
      <url>/2023/07/17/mmpretrain-learning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是对上海人工智能实验室的AI框架mmpretrain的介绍。PyTorch、tensorflow等训练框架已经是众多炼丹师的首选了，只要遵守一定的规则，撰写一份属于自己的训练模板代码，使用起来也非常方便。那么我们为什么要用像mmpretrain这样的框架来训练模型呢？因为出于便捷性和统一性的考虑，每个大实验室或者AI公司团队都有属于自己的训练框架，充分考虑了炼丹师们的所有需求，只需修改其中的配置文件即可轻松调参训练和验证，炼丹师们无需关注代码，只需调参即可，极大的节省了的时间成本。</p></blockquote><h2 id="1-mmpretrain框架搭建"><a href="#1-mmpretrain框架搭建" class="headerlink" title="1. mmpretrain框架搭建"></a>1. mmpretrain框架搭建</h2><p>在命令行中输入：</p><pre class="line-numbers language-shell"><code class="language-shell"># conda create -n open-mmlab python=3.8 pytorch==1.10.1 torchvision==0.11.2 cudatoolkit=11.3 -c pytorch -yconda create -n open-mmlab python=3.8 pytorch==1.12.0 torchvision==0.13.0 cudatoolkit=11.3 -c pytorch -yconda activate open-mmlabpip3 install openmimgit clone https://github.com/open-mmlab/mmpretrain.gitcd mmpretrainmim install -e .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方提供的pytorch版本是1.10.1，torchvision版本是0.11.2，pytorch和torchvision版本可自行调整。</p><p><strong>pytorch与相应torchvision版本对应表：</strong></p><p>以下版本截止2023年4月6日</p><table><thead><tr><th align="center">pytorch</th><th align="center">torchvision</th><th align="center">python</th><th align="center">cuda</th></tr></thead><tbody><tr><td align="center">2.0.0</td><td align="center">&gt;0.14</td><td align="center">&gt;3.7</td><td align="center">11.7,11.8</td></tr><tr><td align="center">1.12.0</td><td align="center">0.12</td><td align="center">3.7-3.9</td><td align="center">10.2(不支持windows),11.3,11.6</td></tr><tr><td align="center">1.11.0</td><td align="center">0.12.0</td><td align="center">&gt;=3.6</td><td align="center">11.3,10.2</td></tr><tr><td align="center">1.10.0/1</td><td align="center">0.11.0/2</td><td align="center">&gt;=3.6</td><td align="center">10.2,11.3</td></tr><tr><td align="center">1.9.0</td><td align="center">0.10.0</td><td align="center">&gt;=3.6</td><td align="center">10.2,11.3</td></tr><tr><td align="center">1.8.0</td><td align="center">0.9.0</td><td align="center">&gt;=3.6</td><td align="center">10.2,11.1</td></tr><tr><td align="center">1.7.1</td><td align="center">0.8.2</td><td align="center">&gt;=3.6</td><td align="center">9.2, 10.1,10.2,11.0</td></tr><tr><td align="center">1.7.0</td><td align="center">0.8.0</td><td align="center">&gt;=3.6</td><td align="center">9.2, 10.1,10.2,11.0</td></tr><tr><td align="center">1.6.0</td><td align="center">0.7.0</td><td align="center">&gt;=3.6</td><td align="center">9.2, 10.1,10.2</td></tr><tr><td align="center">1.5.1</td><td align="center">0.6.1</td><td align="center">&gt;=3.6</td><td align="center">9.2, 10.1,10.2</td></tr><tr><td align="center">1.5.0</td><td align="center">0.6.0</td><td align="center">&gt;=3.6</td><td align="center">9.2, 10.1,10.2</td></tr><tr><td align="center">1.4.0</td><td align="center">0.5.0</td><td align="center">==2.7, &gt;=3.5, &lt;=3.8</td><td align="center">9.2, 10.0</td></tr><tr><td align="center">1.3.1</td><td align="center">0.4.2</td><td align="center">==2.7, &gt;=3.5, &lt;=3.7</td><td align="center">9.2, 10.0</td></tr><tr><td align="center">1.3.0</td><td align="center">0.4.1</td><td align="center">==2.7, &gt;=3.5, &lt;=3.7</td><td align="center">9.2, 10.0</td></tr><tr><td align="center">1.2.0</td><td align="center">0.4.0</td><td align="center">==2.7, &gt;=3.5, &lt;=3.7</td><td align="center">9.2, 10.0</td></tr><tr><td align="center">1.1.0</td><td align="center">0.3.0</td><td align="center">==2.7, &gt;=3.5, &lt;=3.7</td><td align="center">9.0, 10.0</td></tr><tr><td align="center">&lt;1.0.1</td><td align="center">0.2.2</td><td align="center">==2.7, &gt;=3.5, &lt;=3.7</td><td align="center">9.0, 10.0</td></tr></tbody></table><h2 id="2-框架学习"><a href="#2-框架学习" class="headerlink" title="2. 框架学习"></a>2. 框架学习</h2><blockquote><p>查看框架及系统版本</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">,</span> torchvision<span class="token keyword">import</span> mmpretrain<span class="token keyword">import</span> mmcv<span class="token keyword">import</span> mmengine<span class="token keyword">from</span> mmcv<span class="token punctuation">.</span>ops <span class="token keyword">import</span> get_compiling_cuda_version<span class="token punctuation">,</span> get_compiler_version<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Pytorch 版本'</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'CUDA 是否可用'</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MMCV版本'</span><span class="token punctuation">,</span> mmcv<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'CUDA版本'</span><span class="token punctuation">,</span> get_compiling_cuda_version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'编译器版本'</span><span class="token punctuation">,</span> get_compiler_version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mmcv版本'</span><span class="token punctuation">,</span>mmcv<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mmengine版本'</span><span class="token punctuation">,</span>mmengine<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mmpretrain版本'</span><span class="token punctuation">,</span> mmpretrain<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Pytorch 版本 1.10.0+cu113</span><span class="token comment" spellcheck="true"># CUDA 是否可用 True</span><span class="token comment" spellcheck="true"># MMCV版本 2.0.1</span><span class="token comment" spellcheck="true"># CUDA版本 11.3</span><span class="token comment" spellcheck="true"># 编译器版本 GCC 9.3</span><span class="token comment" spellcheck="true"># mmcv版本 2.0.1</span><span class="token comment" spellcheck="true"># mmengine版本 0.8.1</span><span class="token comment" spellcheck="true"># mmpretrain版本 1.0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>调用model</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> mmpretrain<span class="token keyword">from</span> mmpretrain <span class="token keyword">import</span> get_model<span class="token punctuation">,</span> list_models<span class="token punctuation">,</span> inference_model<span class="token comment" spellcheck="true"># 根据任务task和模式pattern查找可用模型</span><span class="token comment" spellcheck="true"># 查找resnet18相关的训练模型</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_models<span class="token punctuation">(</span>task<span class="token operator">=</span><span class="token string">'Image Classification'</span><span class="token punctuation">,</span> pattern<span class="token operator">=</span><span class="token string">'resnet18'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['resnet18_8xb16_cifar10', 'resnet18_8xb32_in1k']</span><span class="token comment" spellcheck="true"># 获取模型并查看其type</span>model <span class="token operator">=</span> get_model<span class="token punctuation">(</span><span class="token string">'resnet18_8xb32_in1k'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;class 'mmpretrain.models.classifiers.image.ImageClassifier'></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>model<span class="token punctuation">.</span>backbone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;class 'mmpretrain.models.backbones.resnet.ResNet'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注册model</p></blockquote><h2 id="3-模型训练（finetune）"><a href="#3-模型训练（finetune）" class="headerlink" title="3. 模型训练（finetune）"></a>3. 模型训练（finetune）</h2><blockquote><p>以ResNet18训练ImageNet-mini为例</p></blockquote><p>熟悉mmpretrain的configs</p><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><h2 id="模型推理"><a href="#模型推理" class="headerlink" title="模型推理"></a>模型推理</h2>]]></content>
      
      
      <categories>
          
          <category> coding note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D | 关于搭建个人博客的过程</title>
      <link href="/2023/07/17/5w2h-godweiyang/"/>
      <url>/2023/07/17/5w2h-godweiyang/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/contact.jpg" alt></p><h2 id="When？什么时候开始写的？"><a href="#When？什么时候开始写的？" class="headerlink" title="When？什么时候开始写的？"></a>When？什么时候开始写的？</h2><p>第一次写博客是 2015 年了，在 CSDN 和博客园上面，当时写文章是为了记录 ACM 竞赛的题解，陆陆续续写了几十篇。但是最后还是没有坚持下去，主要还是因为 CSDN 和博客园的体验太差了，写起文章来很难受，又丑又慢。另一个原因是， CSDN 发个文章还需要审核，定制主题自由度也太差。</p><p>第二次就是 2017 年暑假了，当时自己建了个人博客，域名是：<a href="https://godweiyang.com/" target="_blank" rel="noopener">godweiyang.com</a>。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。算法题解的话最近也开始更新起来了，主要写一些 LeetCode上面的题解。</p><p>最后就是知乎专栏和微信公众号了，这两个平台是最近才搞的，主要把个人博客的文章同步更新过去，内容都差不多。微信公众号本来不想搞的，不支持 markdown ，写起来挺麻烦的。但是考虑到以后的发展，以及可能会有一些变现的操作，还是重操旧业了（其实我公众号两年前就注册过了，只是一直没有更新）。</p><h2 id="Why？为什么会想起来写博客？"><a href="#Why？为什么会想起来写博客？" class="headerlink" title="Why？为什么会想起来写博客？"></a>Why？为什么会想起来写博客？</h2><p>其实刚开始写博客，主要还是为了记录自己平时学到的一些东西，以后可能还能翻出来复习复习。但是现在看来，基本不会再去翻以前写的东西了。</p><p>另一个目的，也是我写博客最主要的目的，还是想分享我知道的一些东西，能够让更多的人因此受益。因为写博客，其实还是认识了不少天南地北的朋友的，有各个高校甚至初高中的学生，也有工作了很多年想学习学习编程的，也有国外一些名校的学生。不管是谁，我觉得都可以扩展我的人脉，现在微信好友人数上限扩展到了 5000 人了，而我才用了十分之一多一点，什么时候能达到上限也算是圆满了。</p><p>最后，有句话叫做：“不以盈利为目的的博客最后都死亡了”。因为如果不能因此获得任何的收入的话，极少有人有这个毅力坚持更新博客。虽然我也想因此获利，但是暂时我并不想因此改变了初衷，去写一些刻意迎合大众的水文，从而获得粉丝。</p><h2 id="What？都写一些什么主题的博客？"><a href="#What？都写一些什么主题的博客？" class="headerlink" title="What？都写一些什么主题的博客？"></a>What？都写一些什么主题的博客？</h2><p>主要都是与我相关的一些计算机相关知识。最主要的就是深度学习和自然语言处理了，但是因为我是做句法分析的，这个方向受众比较小，如果纯粹写这个方向的内容的话，看的人可能会很少。而如果写深度学习和自然语言处理的入门普及或者综合一点热门一点的方向的话，看得人应该会很多。但是这样又有一个弊端，非常的浪费我时间，因为过于基础的知识对我的提升微乎其微，只适合以后我面试前看看补补基础。而主要我现在重心还在发论文，继续搞学术，所以只能写一些结合我最近所学知识的文章。</p><p>还会写一些算法题解，现在主要在做 LeetCode 上面的中等和困难题目，然后每日一更。尽管网上各种 LeetCode 的题解已经太多了，但是我觉得，大多数的题解都非常的模糊，讲解的很不清楚，抄来抄去的有什么意思？而他们的代码风格，更是让我看不下去，最基本的美观都做不到，代码的简洁精炼就更不用谈了。所以我的目的还是尽量用美观精炼的代码来让更多人的算法思想和代码能力得到提升。</p><p>偶尔，我还会分享一些计算机基础知识，比如怎么搭博客（这是我阅读量最高的一篇博客了）、好用的软件、常用的一些软件的安装配置等等。其实讲道理，我是不愿意写这一类文章的，因为非常的费时费力，需要自己动手模拟一遍，确保能够正确完成才能写进文章。不然就会像很多网上的教程那样，抄来抄去一堆错误，根本没有自己动手实践过。但是这种文章其实对很多人帮助还挺大的，大家也乐意去看，如果你在知乎发的话，你会发现这类文章收藏量都挺高的。如果我以后用空了，我还是会经常把我平时的一些经验分享给大家的，比如 LaTeX 常用写作技巧之类的。</p><p>那么其他火的博客都写些什么呢？我觉得当代人闲暇时候、上厕所刷手机的时候，那些碎片时间是没办法好好学习一些知识的，最爱看的还是有趣的故事，例如 99 行代码做出冰雪奇缘特效、程序员脱发、程序员单身狗啦之类的。这些故事背后的技术可能是很深奥的，但是大多数人并不会去关心，只是会看完惊叹一句“卧槽”而已。其他的吸引人的内容还有资料下载、课程学习（当然基本都是广告）等等。不过我个人目前并不想写这些东西，首先这些新闻类的文章很多地方都有了，写来写去就那么些东西，同质化严重。而资料下载确实是个不错的主意，可以分享好东西给大家，但是我个人最近也没有太多值得珍藏的好资料，况且大多数网上都有现成的，我不赞同为了增加粉丝而不放出链接，把资料放在公众号后台的行为。</p><p>总之，不忘初心，粉丝什么的随缘吧。我非常佛系，即使没人看我也会日常更新，就当记日记不是吗？</p><h2 id="Who？写出来的博客都是给谁看的？"><a href="#Who？写出来的博客都是给谁看的？" class="headerlink" title="Who？写出来的博客都是给谁看的？"></a>Who？写出来的博客都是给谁看的？</h2><p>大多数看我博客的都是自然语言处理相关的学生。就拿我在知乎专栏的粉丝来看，大多数人是来看我的论文赏析的，而少部分人是看到了那篇博客搭建教程来的。至于算法题解，貌似并没有很多人看，可能这一类文章网上实在是太多了，没有什么独特的吸引力。而公众号粉丝，目前为止还很少，绝大多数还都是好友粉丝。主要原因还是公众号太封闭了，很难让好友之外的人知道并且关注你。一个方法可以在知乎等平台引流，但是现在这属于违规操作，最好还是不要干了。</p><p>其实我目标的受众群体还是包括但不仅限于计算机系的学生，像一些计算机基础知识，就算你是个小白，也可以从这里学到很多东西。甚至还有很多考研的学生来咨询我问题，虽然我是保研的，但是很多导师选取、学习方面的问题我还是愿意给出我自己的建议的。我这个人向来喜欢分享，也喜欢倾听，如果别人来问我问题，我基本是会耐心回答的。曾经有啥都不会的小白来问我怎么搭建博客，我得从最基本的命令行教他，讲道理这其实很烦，我都不想教，但我还是会尽量把关键点都告诉他。有人会觉得，我这样最后会得到什么呢？是的，也不赚钱，最多偶尔有些朋友会打赏个红包，我还浪费了大把时间（其实还好，白天工作的时候我都简单回复，晚上一般会详细点），但是认识的人多了，许多人还是多少知道我这个名字的，虽然没啥用，但是也算是种隐形财富吧，以后有什么用再说。</p><h2 id="Where？都在什么平台写博客呢？"><a href="#Where？都在什么平台写博客呢？" class="headerlink" title="Where？都在什么平台写博客呢？"></a>Where？都在什么平台写博客呢？</h2><p>这个其实上面都说过了，我现在文章主要更新在个人博客、知乎专栏、微信公众号和 CSDN 上面，我简要说一些这些平台的优缺点吧。</p><p>个人博客可以个性化定制主题，想怎么好看就怎么好看，还不用发文章审核，想发什么就发什么。但是缺点就是发文章麻烦一点的，步骤略多，并且搜索引擎收录很慢的。</p><p>知乎专栏是我比较喜欢的一个平台，主要是它支持markdown，还可以把公式变成矢量图片，还是挺不错的。但是发知乎文章要注意千万别带着营销、引流等内容，不然容易被人举报被删除甚至禁言。</p><p>微信公众号是我最近才开始运营的，相对而言，它的编辑界面是最不友好的一个，只支持富文本编辑，连markdown都没有。但是也有解决方法，比如我现在用<a href="https://mdnice.com/" target="_blank" rel="noopener">mdnice.com</a>这个网站，把markdown转换成微信公众号的富文本格式，还是非常好用的。公众号还有个缺点，太封闭了，很难宣传出去，刚开始只能亲朋好友关注关注，但是如果你真的做大了知名度，还是可以借助微信的优势，赚得不少广告钱的。</p><p>CSDN因为几年前被永久封过号，然后现在不知道为什么又被解封了，所以用的不是特别多，主要都是通过知乎专栏自动同步文章过去的。CSDN 好处就是流量大，很多人都在上面搜东西，百度搜出来也基本都是 CSDN ，但是排版是真的真的烂，不过现在好多了，也支持 markdown 了。但是还是谈不上喜欢，广告什么的都太多了，除非迫不得已，我一般不去 CSDN 看技术文章，我一般都是个人博客或者知乎看论文解读之类的。</p><h2 id="How？按照什么流程来写博客？"><a href="#How？按照什么流程来写博客？" class="headerlink" title="How？按照什么流程来写博客？"></a>How？按照什么流程来写博客？</h2><p>其实同时维护好几个平台还是挺累的，你得找到一个最佳的顺序来发布文章，这样才能事半功倍。我一般都是先在个人博客上写好 markdown 文章，然后发布完之后，打开<a href="https://mdnice.com/" target="_blank" rel="noopener">mdnice.com</a>在线编辑网站，把 markdown 粘贴进去，转成微信公众号和知乎专栏的格式，最后分别发布在两个地方就行了。 CSDN 就不用管了，它会每天自动同步知乎专栏的文章的，倒是为我省了不少事。markdown 写作也挺轻松的，完全不用管排版之类的问题，安安心心写内容就行了。</p><p>微信公众号现在设置的是每天早上 8:05 推送，其实稍微晚一点比较好，这样别人的都推送完了，你的就会置顶在最上面。而知乎专栏和个人博客我就随性发布了，想什么时候发就什么时候发，经常会前一天就写好内容，早早的发布出去了。</p><p>我个人现在来看，写一篇博客最累的是敲公式和找图片，当然像我这篇就一个公式和图都没有，是最最轻松的了。我这个人有强迫症，公式一定要手打 LaTeX 公式，然后转成矢量图才行，这样看着又清楚又舒服。遇到复杂的矩阵公式，能把我敲的头晕。这也是我为什么不喜欢 CSDN 的一个原因，上面很多文章公式全是截图，看的我头都大了。</p><h2 id="How-much？要花多少时间和金钱来运营维护？"><a href="#How-much？要花多少时间和金钱来运营维护？" class="headerlink" title="How much？要花多少时间和金钱来运营维护？"></a>How much？要花多少时间和金钱来运营维护？</h2><p>写博客挺花时间的，特别是现在还在为发论文而忙活的时候，可能论文截稿前那段时间甚至我会停更好久哈哈。不过现在放假了，还算比较闲，有功夫搞搞这些。我个人是倾向于白天还是老老实实学习吧，晚上把部分的游戏时间抽出来写会儿文章，更新一波。这样也不算太浪费时间，毕竟就算不写，时间也都用来打游戏了，游戏输了还坏了心情（我的亚索怎么会输？）。</p><p>那什么时候做 LeetCode 呢？我一般都是白天吃饭时，或者走在路上时，手机 app 上随机选一道题，然后吃个饭的时间就能想出个解法，回到实验室后敲一顿代码通过了就行了。这样看来也节约了不少时间嘛，还能和室友一起讨论讨论，帮他提高一波算法能力。</p><p>金钱的话就基本没有花销了，除了开了个素材设计网站的会员（我是真的睿智，用 PS 不就行了嘛，脑子瓦特了充钱了）以外，其他不需要啥了，偶尔还能吃点打赏钱，粉丝太少了，没有广告。</p><p>因为写文章这上面花时间比较多，写出好的文章、不水文章的话花的时间更多，所以很容易坚持不下去。而又要迎合大众的口味，众口难调嘛，又要坚持自己的初心，尽量写对自己提升大的内容，还是比较难以平衡的。特别是粉丝特别少，没有什么人看的时候，你会很想放弃。</p><p>但是，总会有人在你坚持不下去的时候，给你鼓励的目光，支持你继续走下去的。</p>]]></content>
      
      
      <categories>
          
          <category> coding note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
